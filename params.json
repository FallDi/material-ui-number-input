{
  "name": "Material-ui-number-input",
  "tagline": "The <TextField type=\"number\" /> that user really expects.",
  "body": "# Properties\r\n\r\n| Name                    | Type       | Default   | TextField | Description                                             |\r\n| ----------------------- | ---------- | --------- | --------- | ------------------------------------------------------- |\r\n| children                | *node*     |           | ✓         |                                                         |\r\n| className               | *string*   |           | ✓         | The css class name of the root element. |\r\n| disabled                | *bool*     | *false*   | ✓         | Disables the input field if set to true.|\r\n| floatingLabelFixed      | *bool*     | *false*   | ✓         | If true, the floating label will float even when there is no value. |\r\n| id                      | *string*   |           | ✓         | The id prop for the input field. |\r\n| name                    | *string*   |           | ✓         | Name applied to the input. |\r\n| fullWidth               | *bool*     | *false*   | ✓         | If true, the field receives the property width 100%. |\r\n| underlineShow           | *bool*     | *true*   | ✓         | If true, shows the underline for the input field. |\r\n| defaultValue            | *number*   |           | ✓         | The number to use for the default value. Must be in range [min, max] if any is setted. |\r\n| strategy                | *'ignore' \\| 'warn' \\| 'allow'* | *'allow'* | ❌       | Strategy to use when user presses key and when value prop change it's value. |\r\n| min                     | *number*   |           | ❌         | The number used as minimum value limit. Must be less than max. |\r\n| max                     | *number*   |           | ❌         | The number used as maximum value limit. Must be greater than min. |\r\n| reqired                 | *bool*     | *false*   | ❌         | If true and if input is left empty than instead of 'clean', 'required' error will be emited throughout onError handler if useStrategy is not 'ignore'. |\r\n| value                   | *string*   |           | ✓        | The value of the input field. |\r\n| onChange                | *function* |           | ✓        | Callback function that is fired when input filed must change it's value. **Signature:** `function(event: React.FormEvent, value: string) => void`. |\r\n| onError                 | *function* |         | ❌         | Callback function that is fired when input error status changes and strategy is not 'ignore'.  **Signature:** `function(error: 'none' | 'invalidSymbol' | 'incompleteNumber' | 'singleMinus' | 'singleFloatingPoint' | 'singleZero' | 'min' | 'max' | 'required' | 'clean') => void`. |\r\n| onValid                 | *function*|            | ❌         | Callback function that is fired when input's value is a valid number.  **Signature:** `function(value: number) => void` |\r\n| onRequestValue\\*        | *function* |           | ❌         | Callback function that is fired when strategy is 'warn' or 'ignore', input is controlled and an invalid number value is passed. It provides valid number value which needs to be setted. **Signature:** `function(value: string) => void` |\r\n| errorText               | *node*     |           | ✓         | The error content to display. |\r\n| errorStyle              | *object*   |           | ✓         | The style object to use to override error styles. |\r\n| floatingLabelFocusStyle | *object*   |           | ✓         | The style object to use to override floating label styles when focused. |\r\n| floatingLabelStyle      | *object*   |           | ✓         | The style object to use to override floating label styles. |\r\n| floatingLabelText       | *node*     |           | ✓         | The content to use for the floating label element. |\r\n| hintStyle               | *object*   |           | ✓         | Override the inline-styles of the TextField's hint text element. |\r\n| hintText                | *node*     |           | ✓         | The hint content to display. |\r\n| inputStyle              | *object*   |           | ✓         | Override the inline-styles of the TextField's input element. When multiLine is false: define the style of the input element. When multiLine is true: define the style of the container of the textarea. |\r\n| style                   | *object*   |           | ✓         | Override the inline-styles of the root element. |\r\n| underlineDisabledStyle  | *object*   |           | ✓         | Override the inline-styles of the TextField's underline element when disabled. |\r\n| underlineFocusStyle     | *object*   |           | ✓         | Override the inline-styles of the TextField's underline element when focussed. |\r\n| underlineStyle          | *object*   |           | ✓         | Override the inline-styles of the TextField's underline element. |\r\n\r\n\\* onRequestValue is required when strategy is 'warn' or 'ignore' and input is controlled in order to ensure correct strategy behaviour.\r\n\r\n# Strategies\r\n\r\n| strategy | onError fired | onRequestValue fired |\r\n| -------- | ------------- | ------------------- |\r\n| 'allow'  |       ✓       |                     |\r\n| 'warn'   |       ✓       |          ✓\\*        |\r\n| 'ignore' |               |          ✓\\*        |\r\n\r\n\\* Fired when input is controlled (`value` is provided). If input is not controlled it's value will be automaticlly corrected when it get's invalid number value.\r\n\r\n# Errors\r\n\r\n## 'none'\r\n\r\nFired when input's value is valid (there is no error).\r\n\r\n## 'required'\r\n\r\nFired when `required` prop is `true` and user leaves empty the input or it gets cleared.\r\n\r\n## 'clean'\r\n\r\nFired when `required` prop is `false` and user leaves empty the input or it gets cleared.\r\n\r\n## 'invalidSymbol'\r\n\r\nFired when user enters none special key which is different than `-`,`.`,`[0-9]`.\r\n\r\n## 'incompleteNumber'\r\n\r\nFired wehn user enters `-` as first char in the input or when user enters the first `.`.\r\n\r\n## 'singleMinus'\r\n\r\nFired when user enters `-` not as a first char.\r\n\r\n## 'singleFloatingPoint'\r\n\r\nFired when user enters `.` and there is already one entered.\r\n\r\n## 'singleZero'\r\n\r\nFired when user has entered `0` as first char and enters a digit key.\r\n\r\n## 'min'\r\n\r\nFired when user enters number less than `min` prop value.\r\n\r\n## 'max'\r\n\r\nFired when user enters number greater than `max` prop value.\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}